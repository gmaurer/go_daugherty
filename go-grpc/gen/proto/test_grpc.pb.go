// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/test.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmployeeApiClient is the client API for EmployeeApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeeApiClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	GetAllEmployees(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EmployeesResponse, error)
	GetEmployee(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Employee, error)
}

type employeeApiClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeApiClient(cc grpc.ClientConnInterface) EmployeeApiClient {
	return &employeeApiClient{cc}
}

func (c *employeeApiClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/main.EmployeeApi/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeApiClient) GetAllEmployees(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EmployeesResponse, error) {
	out := new(EmployeesResponse)
	err := c.cc.Invoke(ctx, "/main.EmployeeApi/GetAllEmployees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeApiClient) GetEmployee(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, "/main.EmployeeApi/GetEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeApiServer is the server API for EmployeeApi service.
// All implementations must embed UnimplementedEmployeeApiServer
// for forward compatibility
type EmployeeApiServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	GetAllEmployees(context.Context, *emptypb.Empty) (*EmployeesResponse, error)
	GetEmployee(context.Context, *emptypb.Empty) (*Employee, error)
	mustEmbedUnimplementedEmployeeApiServer()
}

// UnimplementedEmployeeApiServer must be embedded to have forward compatible implementations.
type UnimplementedEmployeeApiServer struct {
}

func (UnimplementedEmployeeApiServer) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedEmployeeApiServer) GetAllEmployees(context.Context, *emptypb.Empty) (*EmployeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEmployees not implemented")
}
func (UnimplementedEmployeeApiServer) GetEmployee(context.Context, *emptypb.Empty) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployee not implemented")
}
func (UnimplementedEmployeeApiServer) mustEmbedUnimplementedEmployeeApiServer() {}

// UnsafeEmployeeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeApiServer will
// result in compilation errors.
type UnsafeEmployeeApiServer interface {
	mustEmbedUnimplementedEmployeeApiServer()
}

func RegisterEmployeeApiServer(s grpc.ServiceRegistrar, srv EmployeeApiServer) {
	s.RegisterService(&EmployeeApi_ServiceDesc, srv)
}

func _EmployeeApi_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeApiServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.EmployeeApi/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeApiServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeApi_GetAllEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeApiServer).GetAllEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.EmployeeApi/GetAllEmployees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeApiServer).GetAllEmployees(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeApi_GetEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeApiServer).GetEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.EmployeeApi/GetEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeApiServer).GetEmployee(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeeApi_ServiceDesc is the grpc.ServiceDesc for EmployeeApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.EmployeeApi",
	HandlerType: (*EmployeeApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _EmployeeApi_SayHello_Handler,
		},
		{
			MethodName: "GetAllEmployees",
			Handler:    _EmployeeApi_GetAllEmployees_Handler,
		},
		{
			MethodName: "GetEmployee",
			Handler:    _EmployeeApi_GetEmployee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/test.proto",
}
